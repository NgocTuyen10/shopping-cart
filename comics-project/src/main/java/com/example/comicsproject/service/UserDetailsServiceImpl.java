package com.example.comicsproject.service;import java.util.Collection;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.AuthorityUtils;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.security.core.userdetails.User;import com.example.comicsproject.entity.Account;import com.example.comicsproject.entity.Role;import com.example.comicsproject.repository.AccountRepository;/** *  * The Class UserDetailsServiceImpl. *  */@Servicepublic class UserDetailsServiceImpl implements UserDetailsService {	@Autowired	private AccountRepository accountReposity;	@Autowired	private BCryptPasswordEncoder bCryptPasswordEncoder;	@Override	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {		Account acc = accountReposity.findAccountByUsername(username);		if (acc == null) {			throw new UsernameNotFoundException(username);		}		String RoleList = "";		for (Role role : acc.getRoles()) {			RoleList += "ROLE_";			RoleList += role.getRoleName();		}//    List<GrantedAuthority> grantedAuthorities = AuthorityUtils//        .commaSeparatedStringToAuthorityList("ROLE_" + applicationUser.getRoles().getName());		List<GrantedAuthority> grantedAuthorities = AuthorityUtils.commaSeparatedStringToAuthorityList(RoleList);		return new AccountApp(acc.getUsername(), bCryptPasswordEncoder.encode(acc.getPassword()), grantedAuthorities,				acc.getAccountId());	}}class AccountApp extends User {	private int accountId;	public AccountApp(String username, String password, Collection<? extends GrantedAuthority> authorities) {		super(username, password, authorities);	}	public AccountApp(String username, String password, Collection<? extends GrantedAuthority> authorities,			int accountId) {		super(username, password, authorities);		setAccountId(accountId);	}	public int getAccountId() {		return accountId;	}	public void setAccountId(int accountId) {		this.accountId = accountId;	}}